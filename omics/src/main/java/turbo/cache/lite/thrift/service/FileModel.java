/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package turbo.cache.lite.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-3")
public class FileModel implements org.apache.thrift.TBase<FileModel, FileModel._Fields>, java.io.Serializable, Cloneable, Comparable<FileModel> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileModel");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField C_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("cPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField H_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("hPath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField P_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("pPath", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MODIFIED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCESS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("accessDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField CAN_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("canRead", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField CAN_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("canWrite", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField IS_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("isFile", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FileModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FileModelTupleSchemeFactory());
  }

  public String name; // required
  public String cPath; // required
  public String hPath; // required
  public String pPath; // required
  public String createDate; // required
  public String modifiedDate; // required
  public String accessDate; // required
  public long size; // required
  public boolean canRead; // required
  public boolean canWrite; // required
  public boolean isFile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    C_PATH((short)2, "cPath"),
    H_PATH((short)3, "hPath"),
    P_PATH((short)4, "pPath"),
    CREATE_DATE((short)5, "createDate"),
    MODIFIED_DATE((short)6, "modifiedDate"),
    ACCESS_DATE((short)7, "accessDate"),
    SIZE((short)8, "size"),
    CAN_READ((short)9, "canRead"),
    CAN_WRITE((short)10, "canWrite"),
    IS_FILE((short)11, "isFile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // C_PATH
          return C_PATH;
        case 3: // H_PATH
          return H_PATH;
        case 4: // P_PATH
          return P_PATH;
        case 5: // CREATE_DATE
          return CREATE_DATE;
        case 6: // MODIFIED_DATE
          return MODIFIED_DATE;
        case 7: // ACCESS_DATE
          return ACCESS_DATE;
        case 8: // SIZE
          return SIZE;
        case 9: // CAN_READ
          return CAN_READ;
        case 10: // CAN_WRITE
          return CAN_WRITE;
        case 11: // IS_FILE
          return IS_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private static final int __CANREAD_ISSET_ID = 1;
  private static final int __CANWRITE_ISSET_ID = 2;
  private static final int __ISFILE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.C_PATH, new org.apache.thrift.meta_data.FieldMetaData("cPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.H_PATH, new org.apache.thrift.meta_data.FieldMetaData("hPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_PATH, new org.apache.thrift.meta_data.FieldMetaData("pPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED_DATE, new org.apache.thrift.meta_data.FieldMetaData("modifiedDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_DATE, new org.apache.thrift.meta_data.FieldMetaData("accessDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CAN_READ, new org.apache.thrift.meta_data.FieldMetaData("canRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.CAN_WRITE, new org.apache.thrift.meta_data.FieldMetaData("canWrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    tmpMap.put(_Fields.IS_FILE, new org.apache.thrift.meta_data.FieldMetaData("isFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL        , "boolean")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileModel.class, metaDataMap);
  }

  public FileModel() {
  }

  public FileModel(
    String name,
    String cPath,
    String hPath,
    String pPath,
    String createDate,
    String modifiedDate,
    String accessDate,
    long size,
    boolean canRead,
    boolean canWrite,
    boolean isFile)
  {
    this();
    this.name = name;
    this.cPath = cPath;
    this.hPath = hPath;
    this.pPath = pPath;
    this.createDate = createDate;
    this.modifiedDate = modifiedDate;
    this.accessDate = accessDate;
    this.size = size;
    setSizeIsSet(true);
    this.canRead = canRead;
    setCanReadIsSet(true);
    this.canWrite = canWrite;
    setCanWriteIsSet(true);
    this.isFile = isFile;
    setIsFileIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FileModel(FileModel other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetCPath()) {
      this.cPath = other.cPath;
    }
    if (other.isSetHPath()) {
      this.hPath = other.hPath;
    }
    if (other.isSetPPath()) {
      this.pPath = other.pPath;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    if (other.isSetModifiedDate()) {
      this.modifiedDate = other.modifiedDate;
    }
    if (other.isSetAccessDate()) {
      this.accessDate = other.accessDate;
    }
    this.size = other.size;
    this.canRead = other.canRead;
    this.canWrite = other.canWrite;
    this.isFile = other.isFile;
  }

  public FileModel deepCopy() {
    return new FileModel(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.cPath = null;
    this.hPath = null;
    this.pPath = null;
    this.createDate = null;
    this.modifiedDate = null;
    this.accessDate = null;
    setSizeIsSet(false);
    this.size = 0;
    setCanReadIsSet(false);
    this.canRead = false;
    setCanWriteIsSet(false);
    this.canWrite = false;
    setIsFileIsSet(false);
    this.isFile = false;
  }

  public String getName() {
    return this.name;
  }

  public FileModel setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getCPath() {
    return this.cPath;
  }

  public FileModel setCPath(String cPath) {
    this.cPath = cPath;
    return this;
  }

  public void unsetCPath() {
    this.cPath = null;
  }

  /** Returns true if field cPath is set (has been assigned a value) and false otherwise */
  public boolean isSetCPath() {
    return this.cPath != null;
  }

  public void setCPathIsSet(boolean value) {
    if (!value) {
      this.cPath = null;
    }
  }

  public String getHPath() {
    return this.hPath;
  }

  public FileModel setHPath(String hPath) {
    this.hPath = hPath;
    return this;
  }

  public void unsetHPath() {
    this.hPath = null;
  }

  /** Returns true if field hPath is set (has been assigned a value) and false otherwise */
  public boolean isSetHPath() {
    return this.hPath != null;
  }

  public void setHPathIsSet(boolean value) {
    if (!value) {
      this.hPath = null;
    }
  }

  public String getPPath() {
    return this.pPath;
  }

  public FileModel setPPath(String pPath) {
    this.pPath = pPath;
    return this;
  }

  public void unsetPPath() {
    this.pPath = null;
  }

  /** Returns true if field pPath is set (has been assigned a value) and false otherwise */
  public boolean isSetPPath() {
    return this.pPath != null;
  }

  public void setPPathIsSet(boolean value) {
    if (!value) {
      this.pPath = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public FileModel setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public String getModifiedDate() {
    return this.modifiedDate;
  }

  public FileModel setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  public void unsetModifiedDate() {
    this.modifiedDate = null;
  }

  /** Returns true if field modifiedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedDate() {
    return this.modifiedDate != null;
  }

  public void setModifiedDateIsSet(boolean value) {
    if (!value) {
      this.modifiedDate = null;
    }
  }

  public String getAccessDate() {
    return this.accessDate;
  }

  public FileModel setAccessDate(String accessDate) {
    this.accessDate = accessDate;
    return this;
  }

  public void unsetAccessDate() {
    this.accessDate = null;
  }

  /** Returns true if field accessDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessDate() {
    return this.accessDate != null;
  }

  public void setAccessDateIsSet(boolean value) {
    if (!value) {
      this.accessDate = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public FileModel setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public boolean isCanRead() {
    return this.canRead;
  }

  public FileModel setCanRead(boolean canRead) {
    this.canRead = canRead;
    setCanReadIsSet(true);
    return this;
  }

  public void unsetCanRead() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANREAD_ISSET_ID);
  }

  /** Returns true if field canRead is set (has been assigned a value) and false otherwise */
  public boolean isSetCanRead() {
    return EncodingUtils.testBit(__isset_bitfield, __CANREAD_ISSET_ID);
  }

  public void setCanReadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANREAD_ISSET_ID, value);
  }

  public boolean isCanWrite() {
    return this.canWrite;
  }

  public FileModel setCanWrite(boolean canWrite) {
    this.canWrite = canWrite;
    setCanWriteIsSet(true);
    return this;
  }

  public void unsetCanWrite() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANWRITE_ISSET_ID);
  }

  /** Returns true if field canWrite is set (has been assigned a value) and false otherwise */
  public boolean isSetCanWrite() {
    return EncodingUtils.testBit(__isset_bitfield, __CANWRITE_ISSET_ID);
  }

  public void setCanWriteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANWRITE_ISSET_ID, value);
  }

  public boolean isIsFile() {
    return this.isFile;
  }

  public FileModel setIsFile(boolean isFile) {
    this.isFile = isFile;
    setIsFileIsSet(true);
    return this;
  }

  public void unsetIsFile() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFILE_ISSET_ID);
  }

  /** Returns true if field isFile is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFile() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFILE_ISSET_ID);
  }

  public void setIsFileIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFILE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case C_PATH:
      if (value == null) {
        unsetCPath();
      } else {
        setCPath((String)value);
      }
      break;

    case H_PATH:
      if (value == null) {
        unsetHPath();
      } else {
        setHPath((String)value);
      }
      break;

    case P_PATH:
      if (value == null) {
        unsetPPath();
      } else {
        setPPath((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case MODIFIED_DATE:
      if (value == null) {
        unsetModifiedDate();
      } else {
        setModifiedDate((String)value);
      }
      break;

    case ACCESS_DATE:
      if (value == null) {
        unsetAccessDate();
      } else {
        setAccessDate((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    case CAN_READ:
      if (value == null) {
        unsetCanRead();
      } else {
        setCanRead((Boolean)value);
      }
      break;

    case CAN_WRITE:
      if (value == null) {
        unsetCanWrite();
      } else {
        setCanWrite((Boolean)value);
      }
      break;

    case IS_FILE:
      if (value == null) {
        unsetIsFile();
      } else {
        setIsFile((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case C_PATH:
      return getCPath();

    case H_PATH:
      return getHPath();

    case P_PATH:
      return getPPath();

    case CREATE_DATE:
      return getCreateDate();

    case MODIFIED_DATE:
      return getModifiedDate();

    case ACCESS_DATE:
      return getAccessDate();

    case SIZE:
      return Long.valueOf(getSize());

    case CAN_READ:
      return Boolean.valueOf(isCanRead());

    case CAN_WRITE:
      return Boolean.valueOf(isCanWrite());

    case IS_FILE:
      return Boolean.valueOf(isIsFile());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case C_PATH:
      return isSetCPath();
    case H_PATH:
      return isSetHPath();
    case P_PATH:
      return isSetPPath();
    case CREATE_DATE:
      return isSetCreateDate();
    case MODIFIED_DATE:
      return isSetModifiedDate();
    case ACCESS_DATE:
      return isSetAccessDate();
    case SIZE:
      return isSetSize();
    case CAN_READ:
      return isSetCanRead();
    case CAN_WRITE:
      return isSetCanWrite();
    case IS_FILE:
      return isSetIsFile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FileModel)
      return this.equals((FileModel)that);
    return false;
  }

  public boolean equals(FileModel that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cPath = true && this.isSetCPath();
    boolean that_present_cPath = true && that.isSetCPath();
    if (this_present_cPath || that_present_cPath) {
      if (!(this_present_cPath && that_present_cPath))
        return false;
      if (!this.cPath.equals(that.cPath))
        return false;
    }

    boolean this_present_hPath = true && this.isSetHPath();
    boolean that_present_hPath = true && that.isSetHPath();
    if (this_present_hPath || that_present_hPath) {
      if (!(this_present_hPath && that_present_hPath))
        return false;
      if (!this.hPath.equals(that.hPath))
        return false;
    }

    boolean this_present_pPath = true && this.isSetPPath();
    boolean that_present_pPath = true && that.isSetPPath();
    if (this_present_pPath || that_present_pPath) {
      if (!(this_present_pPath && that_present_pPath))
        return false;
      if (!this.pPath.equals(that.pPath))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_modifiedDate = true && this.isSetModifiedDate();
    boolean that_present_modifiedDate = true && that.isSetModifiedDate();
    if (this_present_modifiedDate || that_present_modifiedDate) {
      if (!(this_present_modifiedDate && that_present_modifiedDate))
        return false;
      if (!this.modifiedDate.equals(that.modifiedDate))
        return false;
    }

    boolean this_present_accessDate = true && this.isSetAccessDate();
    boolean that_present_accessDate = true && that.isSetAccessDate();
    if (this_present_accessDate || that_present_accessDate) {
      if (!(this_present_accessDate && that_present_accessDate))
        return false;
      if (!this.accessDate.equals(that.accessDate))
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_canRead = true;
    boolean that_present_canRead = true;
    if (this_present_canRead || that_present_canRead) {
      if (!(this_present_canRead && that_present_canRead))
        return false;
      if (this.canRead != that.canRead)
        return false;
    }

    boolean this_present_canWrite = true;
    boolean that_present_canWrite = true;
    if (this_present_canWrite || that_present_canWrite) {
      if (!(this_present_canWrite && that_present_canWrite))
        return false;
      if (this.canWrite != that.canWrite)
        return false;
    }

    boolean this_present_isFile = true;
    boolean that_present_isFile = true;
    if (this_present_isFile || that_present_isFile) {
      if (!(this_present_isFile && that_present_isFile))
        return false;
      if (this.isFile != that.isFile)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cPath = true && (isSetCPath());
    list.add(present_cPath);
    if (present_cPath)
      list.add(cPath);

    boolean present_hPath = true && (isSetHPath());
    list.add(present_hPath);
    if (present_hPath)
      list.add(hPath);

    boolean present_pPath = true && (isSetPPath());
    list.add(present_pPath);
    if (present_pPath)
      list.add(pPath);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_modifiedDate = true && (isSetModifiedDate());
    list.add(present_modifiedDate);
    if (present_modifiedDate)
      list.add(modifiedDate);

    boolean present_accessDate = true && (isSetAccessDate());
    list.add(present_accessDate);
    if (present_accessDate)
      list.add(accessDate);

    boolean present_size = true;
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_canRead = true;
    list.add(present_canRead);
    if (present_canRead)
      list.add(canRead);

    boolean present_canWrite = true;
    list.add(present_canWrite);
    if (present_canWrite)
      list.add(canWrite);

    boolean present_isFile = true;
    list.add(present_isFile);
    if (present_isFile)
      list.add(isFile);

    return list.hashCode();
  }

  @Override
  public int compareTo(FileModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCPath()).compareTo(other.isSetCPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cPath, other.cPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHPath()).compareTo(other.isSetHPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hPath, other.hPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPPath()).compareTo(other.isSetPPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pPath, other.pPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedDate()).compareTo(other.isSetModifiedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedDate, other.modifiedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessDate()).compareTo(other.isSetAccessDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessDate, other.accessDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanRead()).compareTo(other.isSetCanRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canRead, other.canRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanWrite()).compareTo(other.isSetCanWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canWrite, other.canWrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFile()).compareTo(other.isSetIsFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFile, other.isFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FileModel(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cPath:");
    if (this.cPath == null) {
      sb.append("null");
    } else {
      sb.append(this.cPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hPath:");
    if (this.hPath == null) {
      sb.append("null");
    } else {
      sb.append(this.hPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pPath:");
    if (this.pPath == null) {
      sb.append("null");
    } else {
      sb.append(this.pPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifiedDate:");
    if (this.modifiedDate == null) {
      sb.append("null");
    } else {
      sb.append(this.modifiedDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessDate:");
    if (this.accessDate == null) {
      sb.append("null");
    } else {
      sb.append(this.accessDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canRead:");
    sb.append(this.canRead);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canWrite:");
    sb.append(this.canWrite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFile:");
    sb.append(this.isFile);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FileModelStandardSchemeFactory implements SchemeFactory {
    public FileModelStandardScheme getScheme() {
      return new FileModelStandardScheme();
    }
  }

  private static class FileModelStandardScheme extends StandardScheme<FileModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FileModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // C_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cPath = iprot.readString();
              struct.setCPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // H_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hPath = iprot.readString();
              struct.setHPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // P_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pPath = iprot.readString();
              struct.setPPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MODIFIED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifiedDate = iprot.readString();
              struct.setModifiedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCESS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessDate = iprot.readString();
              struct.setAccessDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CAN_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canRead = iprot.readBool();
              struct.setCanReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CAN_WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canWrite = iprot.readBool();
              struct.setCanWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IS_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFile = iprot.readBool();
              struct.setIsFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FileModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.cPath != null) {
        oprot.writeFieldBegin(C_PATH_FIELD_DESC);
        oprot.writeString(struct.cPath);
        oprot.writeFieldEnd();
      }
      if (struct.hPath != null) {
        oprot.writeFieldBegin(H_PATH_FIELD_DESC);
        oprot.writeString(struct.hPath);
        oprot.writeFieldEnd();
      }
      if (struct.pPath != null) {
        oprot.writeFieldBegin(P_PATH_FIELD_DESC);
        oprot.writeString(struct.pPath);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      if (struct.modifiedDate != null) {
        oprot.writeFieldBegin(MODIFIED_DATE_FIELD_DESC);
        oprot.writeString(struct.modifiedDate);
        oprot.writeFieldEnd();
      }
      if (struct.accessDate != null) {
        oprot.writeFieldBegin(ACCESS_DATE_FIELD_DESC);
        oprot.writeString(struct.accessDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI64(struct.size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_READ_FIELD_DESC);
      oprot.writeBool(struct.canRead);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAN_WRITE_FIELD_DESC);
      oprot.writeBool(struct.canWrite);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FILE_FIELD_DESC);
      oprot.writeBool(struct.isFile);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FileModelTupleSchemeFactory implements SchemeFactory {
    public FileModelTupleScheme getScheme() {
      return new FileModelTupleScheme();
    }
  }

  private static class FileModelTupleScheme extends TupleScheme<FileModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FileModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetCPath()) {
        optionals.set(1);
      }
      if (struct.isSetHPath()) {
        optionals.set(2);
      }
      if (struct.isSetPPath()) {
        optionals.set(3);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(4);
      }
      if (struct.isSetModifiedDate()) {
        optionals.set(5);
      }
      if (struct.isSetAccessDate()) {
        optionals.set(6);
      }
      if (struct.isSetSize()) {
        optionals.set(7);
      }
      if (struct.isSetCanRead()) {
        optionals.set(8);
      }
      if (struct.isSetCanWrite()) {
        optionals.set(9);
      }
      if (struct.isSetIsFile()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCPath()) {
        oprot.writeString(struct.cPath);
      }
      if (struct.isSetHPath()) {
        oprot.writeString(struct.hPath);
      }
      if (struct.isSetPPath()) {
        oprot.writeString(struct.pPath);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetModifiedDate()) {
        oprot.writeString(struct.modifiedDate);
      }
      if (struct.isSetAccessDate()) {
        oprot.writeString(struct.accessDate);
      }
      if (struct.isSetSize()) {
        oprot.writeI64(struct.size);
      }
      if (struct.isSetCanRead()) {
        oprot.writeBool(struct.canRead);
      }
      if (struct.isSetCanWrite()) {
        oprot.writeBool(struct.canWrite);
      }
      if (struct.isSetIsFile()) {
        oprot.writeBool(struct.isFile);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FileModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cPath = iprot.readString();
        struct.setCPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hPath = iprot.readString();
        struct.setHPathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pPath = iprot.readString();
        struct.setPPathIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.modifiedDate = iprot.readString();
        struct.setModifiedDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accessDate = iprot.readString();
        struct.setAccessDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.size = iprot.readI64();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.canRead = iprot.readBool();
        struct.setCanReadIsSet(true);
      }
      if (incoming.get(9)) {
        struct.canWrite = iprot.readBool();
        struct.setCanWriteIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isFile = iprot.readBool();
        struct.setIsFileIsSet(true);
      }
    }
  }

}

